// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  name           String
  email          String          @unique
  emailVerified  Boolean
  image          String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  sessions       Session[]
  accounts       Account[]
  links          Links[]
  collections    Collections[]
  spaces         Space[]
  followedSpaces SpaceFollower[]
  likedLink      LikedLinks[]
  bookmark       Bookmarks[]

  @@map("user")
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Links {
  id           String       @id @default(uuid())
  url          String       @unique
  title        String?
  description  String?
  thoughts     String?
  image        String?
  metadata     Json?
  userId       String
  user         User         @relation(fields: [userId], references: [id])
  collectionId String?
  collection   Collections? @relation(fields: [collectionId], references: [id])
  spaceId      String?
  space        Space?       @relation(fields: [spaceId], references: [id])
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  sessionId    String?
  linksOnTag   LinksOnTag[]
  like         LikedLinks[]
  bookmark     Bookmarks[]
}

model Collections {
  id          String   @id @default(uuid())
  name        String
  description String?
  image       String?
  ownerId     String
  owner       User     @relation(fields: [ownerId], references: [id])
  links       Links[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Space {
  id          String          @id @default(uuid())
  name        String
  handle      String          @unique
  image       String?
  description String?
  visibility  Visibility      @default(PUBLIC)
  ownerId     String
  owner       User            @relation(fields: [ownerId], references: [id])
  followers   SpaceFollower[]
  links       Links[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model SpaceFollower {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  Space     Space    @relation(fields: [spaceId], references: [id])
  spaceId   String
  createdAt DateTime @default(now())

  @@unique([userId, spaceId])
}

model LikedLinks {
  id        String   @id @default(uuid())
  linkId    String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  Links     Links    @relation(fields: [linkId], references: [id])

  @@unique([linkId, userId])
}

model Bookmarks {
  id        String   @id @default(uuid())
  linkId    String
  userId    String
  link      Links    @relation(fields: [linkId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Tag {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  links LinksOnTag[]
}

model LinksOnTag {
  linkId String
  tagId  String
  tag    Tag    @relation(fields: [tagId], references: [id])
  link   Links  @relation(fields: [linkId], references: [id])

  @@id([linkId, tagId])
}

enum Visibility {
  PUBLIC
  PRIVATE
}
